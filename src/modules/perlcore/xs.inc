/*
 * This file was generated automatically by ExtUtils::ParseXS version 2.21 from the
 * contents of KVIrc.xs. Do not edit this file, edit KVIrc.xs instead.
 *
 *	ANY CHANGES MADE HERE WILL BE LOST! 
 *
 */

#line 1 "KVIrc.xs"
//=============================================================================
//
//   File : KVIrc.xs
//   Creation date : Unknown by Szymon Stefanek
//
//   This toolbar is part of the KVIrc irc client distribution
//   Copyright (C) 2009 Szymon Stefanek (pragma at kvirc dot net)
//
//   This program is FREE software. You can redistribute it and/or
//   modify it under the terms of the GNU General Public License
//   as published by the Free Software Foundation; either version 2
//   of the License, or (at your opinion) any later version.
//
//   This program is distributed in the HOPE that it will be USEFUL,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//   See the GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program. If not, write to the Free Software Foundation,
//   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
//=============================================================================

#line 35 "KVIrc.c"
#ifndef PERL_UNUSED_VAR
#  define PERL_UNUSED_VAR(var) if (0) var = var
#endif

#ifndef PERL_ARGS_ASSERT_CROAK_XS_USAGE
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE assert(cv); assert(params)

/* prototype to pass -Wmissing-prototypes */
STATIC void
S_croak_xs_usage(pTHX_ const CV *const cv, const char *const params);

STATIC void
S_croak_xs_usage(pTHX_ const CV *const cv, const char *const params)
{
    const GV *const gv = CvGV(cv);

    PERL_ARGS_ASSERT_CROAK_XS_USAGE;

    if (gv) {
        const char *const gvname = GvNAME(gv);
        const HV *const stash = GvSTASH(gv);
        const char *const hvname = stash ? HvNAME(stash) : NULL;

        if (hvname)
            Perl_croak(aTHX_ "Usage: %s::%s(%s)", hvname, gvname, params);
        else
            Perl_croak(aTHX_ "Usage: %s(%s)", gvname, params);
    } else {
        /* Pants. I don't think that it should be possible to get here. */
        Perl_croak(aTHX_ "Usage: CODE(0x%"UVxf")(%s)", PTR2UV(cv), params);
    }
}
#undef  PERL_ARGS_ASSERT_CROAK_XS_USAGE

#ifdef PERL_IMPLICIT_CONTEXT
#define croak_xs_usage(a,b)	S_croak_xs_usage(aTHX_ a,b)
#else
#define croak_xs_usage		S_croak_xs_usage
#endif

#endif

/* NOTE: the prototype of newXSproto() is different in versions of perls,
 * so we define a portable version of newXSproto()
 */
#ifdef newXS_flags
#define newXSproto_portable(name, c_impl, file, proto) newXS_flags(name, c_impl, file, proto, 0)
#else
#define newXSproto_portable(name, c_impl, file, proto) (PL_Sv=(SV*)newXS(name, c_impl, file), sv_setpv(PL_Sv, proto), (CV*)PL_Sv)
#endif /* !defined(newXS_flags) */

#line 87 "KVIrc.c"

XS(XS_KVIrc_echo); /* prototype to pass -Wmissing-prototypes */
XS(XS_KVIrc_echo)
{
#ifdef dVAR
    dVAR; dXSARGS;
#else
    dXSARGS;
#endif
    if (items < 1 || items > 3)
       croak_xs_usage(cv,  "text, colorset = 0, windowid = 0");
    {
	char *	text = (char *)SvPV_nolen(ST(0));
	int	colorset;
	char *	windowid;

	if (items < 2)
	    colorset = 0;
	else {
	    colorset = (int)SvIV(ST(1));
	}

	if (items < 3)
	    windowid = 0;
	else {
	    windowid = (char *)SvPV_nolen(ST(2));
	}
#line 34 "KVIrc.xs"
		if(g_pCurrentKvsContext && text)
		{
			KviWindow * pWnd;
			if(windowid)
			{
				pWnd = g_pApp->findWindow(windowid);
				if(!pWnd)pWnd = g_pCurrentKvsContext->window();
			} else {
				pWnd = g_pCurrentKvsContext->window();
			}
			pWnd->outputNoFmt(colorset,QString::fromUtf8(text));
		}
#line 128 "KVIrc.c"
    }
    XSRETURN_EMPTY;
}


XS(XS_KVIrc_say); /* prototype to pass -Wmissing-prototypes */
XS(XS_KVIrc_say)
{
#ifdef dVAR
    dVAR; dXSARGS;
#else
    dXSARGS;
#endif
    if (items < 1 || items > 2)
       croak_xs_usage(cv,  "text, windowid = 0");
    {
	char *	text = (char *)SvPV_nolen(ST(0));
	char *	windowid;

	if (items < 2)
	    windowid = 0;
	else {
	    windowid = (char *)SvPV_nolen(ST(1));
	}
#line 51 "KVIrc.xs"
		if(g_pCurrentKvsContext && text)
		{
			KviWindow * pWnd;
			if(windowid)
			{
				pWnd = g_pApp->findWindow(windowid);
				if(!pWnd)pWnd = g_pCurrentKvsContext->window();
			} else {
				pWnd = g_pCurrentKvsContext->window();
			}
			QString tmp = QString::fromUtf8(text);
			KviUserInput::parse(tmp,pWnd);
		}
#line 167 "KVIrc.c"
    }
    XSRETURN_EMPTY;
}


XS(XS_KVIrc_warning); /* prototype to pass -Wmissing-prototypes */
XS(XS_KVIrc_warning)
{
#ifdef dVAR
    dVAR; dXSARGS;
#else
    dXSARGS;
#endif
    if (items != 1)
       croak_xs_usage(cv,  "text");
    {
	char *	text = (char *)SvPV_nolen(ST(0));
#line 68 "KVIrc.xs"
		if((!g_bExecuteQuiet) && g_pCurrentKvsContext)
			g_pCurrentKvsContext->warning(text);
#line 188 "KVIrc.c"
    }
    XSRETURN_EMPTY;
}


XS(XS_KVIrc_internalWarning); /* prototype to pass -Wmissing-prototypes */
XS(XS_KVIrc_internalWarning)
{
#ifdef dVAR
    dVAR; dXSARGS;
#else
    dXSARGS;
#endif
    if (items != 1)
       croak_xs_usage(cv,  "text");
    {
	char *	text = (char *)SvPV_nolen(ST(0));
#line 74 "KVIrc.xs"
		if(!g_bExecuteQuiet)
			g_lWarningList.append(QString(text));
#line 209 "KVIrc.c"
    }
    XSRETURN_EMPTY;
}


XS(XS_KVIrc_getLocal); /* prototype to pass -Wmissing-prototypes */
XS(XS_KVIrc_getLocal)
{
#ifdef dVAR
    dVAR; dXSARGS;
#else
    dXSARGS;
#endif
    if (items != 1)
       croak_xs_usage(cv,  "varname");
    {
	char *	varname = (char *)SvPV_nolen(ST(0));
	char *	RETVAL;
	dXSTARG;
#line 81 "KVIrc.xs"
		QString tmp;
		KviCString hack;
		if(g_pCurrentKvsContext)
		{
			KviKvsVariant * pVar = g_pCurrentKvsContext->localVariables()->find(varname);
			if(pVar)
			{
				pVar->asString(tmp);
				hack = tmp;
				RETVAL = hack.ptr();
			} else RETVAL = "";
		}
#line 242 "KVIrc.c"
	sv_setpv(TARG, RETVAL); XSprePUSH; PUSHTARG;
    }
    XSRETURN(1);
}


XS(XS_KVIrc_setLocal); /* prototype to pass -Wmissing-prototypes */
XS(XS_KVIrc_setLocal)
{
#ifdef dVAR
    dVAR; dXSARGS;
#else
    dXSARGS;
#endif
    if (items != 2)
       croak_xs_usage(cv,  "varname, value");
    {
	char *	varname = (char *)SvPV_nolen(ST(0));
	char *	value = (char *)SvPV_nolen(ST(1));
#line 100 "KVIrc.xs"
		if(g_pCurrentKvsContext)
		{
			if(value && *value)
			{
				KviKvsVariant * pVar = g_pCurrentKvsContext->localVariables()->get(varname);
				pVar->setString(value);
			} else {
				g_pCurrentKvsContext->localVariables()->unset(varname);
			}
		}
#line 273 "KVIrc.c"
    }
    XSRETURN_EMPTY;
}


XS(XS_KVIrc_getGlobal); /* prototype to pass -Wmissing-prototypes */
XS(XS_KVIrc_getGlobal)
{
#ifdef dVAR
    dVAR; dXSARGS;
#else
    dXSARGS;
#endif
    if (items != 1)
       croak_xs_usage(cv,  "varname");
    {
	char *	varname = (char *)SvPV_nolen(ST(0));
	char *	RETVAL;
	dXSTARG;
#line 114 "KVIrc.xs"
		QString tmp;
		KviCString hack;
		if(g_pCurrentKvsContext)
		{
			KviKvsVariant * pVar = g_pCurrentKvsContext->globalVariables()->find(varname);
			if(pVar)
			{
				pVar->asString(tmp);
				hack = tmp;
				RETVAL = hack.ptr();
			} else RETVAL = "";
		}
#line 306 "KVIrc.c"
	sv_setpv(TARG, RETVAL); XSprePUSH; PUSHTARG;
    }
    XSRETURN(1);
}


XS(XS_KVIrc_setGlobal); /* prototype to pass -Wmissing-prototypes */
XS(XS_KVIrc_setGlobal)
{
#ifdef dVAR
    dVAR; dXSARGS;
#else
    dXSARGS;
#endif
    if (items != 2)
       croak_xs_usage(cv,  "varname, value");
    {
	char *	varname = (char *)SvPV_nolen(ST(0));
	char *	value = (char *)SvPV_nolen(ST(1));
#line 133 "KVIrc.xs"
		if(g_pCurrentKvsContext)
		{
			if(value && *value)
			{
				KviKvsVariant * pVar = g_pCurrentKvsContext->globalVariables()->get(varname);
				pVar->setString(value);
			} else {
				g_pCurrentKvsContext->localVariables()->unset(varname);
			}
		}
#line 337 "KVIrc.c"
    }
    XSRETURN_EMPTY;
}


XS(XS_KVIrc_eval); /* prototype to pass -Wmissing-prototypes */
XS(XS_KVIrc_eval)
{
#ifdef dVAR
    dVAR; dXSARGS;
#else
    dXSARGS;
#endif
    if (items != 1)
       croak_xs_usage(cv,  "code");
    {
	char *	code = (char *)SvPV_nolen(ST(0));
	char *	RETVAL;
	dXSTARG;
#line 148 "KVIrc.xs"
		if(g_pCurrentKvsContext && code)
		{
			KviKvsVariant ret;
			if(KviKvsScript::run(QString::fromUtf8(code),g_pCurrentKvsContext->window(),0,&ret))
			{
				QString tmp;
				ret.asString(tmp);
				g_szLastReturnValue = tmp;
			} else {
				g_szLastReturnValue = "";
			}
			RETVAL = g_szLastReturnValue.ptr();
		} else {
			RETVAL = "";
		}
#line 373 "KVIrc.c"
	sv_setpv(TARG, RETVAL); XSprePUSH; PUSHTARG;
    }
    XSRETURN(1);
}

#ifdef __cplusplus
extern "C"
#endif
XS(boot_KVIrc); /* prototype to pass -Wmissing-prototypes */
XS(boot_KVIrc)
{
#ifdef dVAR
    dVAR; dXSARGS;
#else
    dXSARGS;
#endif
#if (PERL_REVISION == 5 && PERL_VERSION < 9)
    char* file = __FILE__;
#else
    const char* file = __FILE__;
#endif

    PERL_UNUSED_VAR(cv); /* -W */
    PERL_UNUSED_VAR(items); /* -W */
    XS_VERSION_BOOTCHECK ;

        (void)newXSproto_portable("KVIrc::echo", XS_KVIrc_echo, file, "$;$$");
        (void)newXSproto_portable("KVIrc::say", XS_KVIrc_say, file, "$;$");
        (void)newXSproto_portable("KVIrc::warning", XS_KVIrc_warning, file, "$");
        (void)newXSproto_portable("KVIrc::internalWarning", XS_KVIrc_internalWarning, file, "$");
        (void)newXSproto_portable("KVIrc::getLocal", XS_KVIrc_getLocal, file, "$");
        (void)newXSproto_portable("KVIrc::setLocal", XS_KVIrc_setLocal, file, "$$");
        (void)newXSproto_portable("KVIrc::getGlobal", XS_KVIrc_getGlobal, file, "$");
        (void)newXSproto_portable("KVIrc::setGlobal", XS_KVIrc_setGlobal, file, "$$");
        (void)newXSproto_portable("KVIrc::eval", XS_KVIrc_eval, file, "$");
#if (PERL_REVISION == 5 && PERL_VERSION >= 9)
  if (PL_unitcheckav)
       call_list(PL_scopestack_ix, PL_unitcheckav);
#endif
    XSRETURN_YES;
}

